"use strict";

const { append } = require("express/lib/response");
// The following is minimized under 'use strict' until otherwise indicated
const fs = require("fs");
const { ppid } = require("process");

process.stdin.resume();
process.stdin.setEncoding("utf-8");

let inputString = "";
let currentLine = 0;

process.stdin.on("data", function (inputStdin) {
  inputString += inputStdin;
});

process.stdin.on("end", function () {
  inputString = inputString.split("\n");

  main();
});

function readLine() {
  return inputString[currentLine++];
}
//end minimized text under 'use strict'

/*
 * Complete the 'getUserTransaction' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts following parameters:
 *  1. INTEGER uid
 *  2. STRING txnType
 *  3. STRING monthYear
 *
 *  https://jsonmock.hackerrank.com/api/transactions/search?userId=
 */
//uid: id for which records will be fetched but matched with user.id in the returned response (INTEGER), given txnType (STRING), given timeframe by which it needs to be filtered(MM-YYYY).
//

// async function getUserTransaction(uid,txnType, monthYear) {
//     let response = await fetch(`https://jsonmock.hackerrank.com/api/transactions/search?userId=${uid}`)
//     let user = await response.json();
//     console.log(user.txnType)
//     return user.filter(e=>e.txnType === 'credit')
//     //need to make uid => userId, uid needs to be a num
// }
async function getUserTransaction(uid, monthYear, txnType) {
  let response = await fetch(
    `https://jsonmock.hackerrank.com/api/transactions/search?userId=${uid}`
  );
  let user = await response.json();
	
    let sortedUsers = user.data.filter((e) => {
      let month = `${new Date(e.timestamp).getMonth()}`;
      if(month < 10){
        `0${month}`
      }
      let year = `${new Date(e.timestamp).getFullYear()}`;
      let fullDate = `${month}-${year}`;

      return fullDate === monthYear && e.txnType === txnType 
    }                   
  )
  return sortedUsers.map(e=>e.id)
}

getUserTransaction(4, '2-2019', 'credit').then(result=>console.log(result))

let total_results = []
for (page_num in new Range(7)){
let url = `https://jsonmock.hackerrank.com/api/transactions/search?userId=${uid}&str(page_num)`
  response = requests.get(url)
    data = response.json()
    total_results = total_results + data['results']
}

// helper function that awaits this function and then returns it when problem is fulfilled?
// Await the first fetch based on uid and grabbing the total amount of pages
// get total amount of pages and store as a var. do a loop to do what we did in the rest of the function and filter based on that
// don't return each page, return total
//at bottom of instructional (line 83), try to get that sample case to work. 
// First thing to do is to get every single transaction for an id

async function main() {
  //the following is minimized in the editor until otherwise indicated
  const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

  const uid = parseInt(readLine().trim(), 10);

  const txnType = readLine();

  const monthYear = readLine();

  const result = await getUserTransaction(uid, txnType, monthYear);

  ws.write(result.join("\n") + "\n");

  ws.end();
  //end minimized text under async function main()
}

//Supposed to use GET method to get info from a cc db.
//Supposed to query a URL that has uid at the end (user id). When I do, will return all records in uid obj.
//  Paginated but can navigate by tacking on &page=num

//5 fields returned from API: page, num of results per page, total num of records in search res, total num of pages to be queried, and the data.

//The data has the id, timestamp when it was generated, the userId, the user name, the transaction type (credit vs debit), the amount, the location where the transaction happened, incl. id, address, city, and zip, and the IP address of the device who did the transaction.
//  user-id => uid, transaction type => txnType, and date/monthYear => MM-YYYY
// WANTS num of records generated by uid in monthYear which has a transaction type of txnType (so cc or dc?). Transaction must be greater than monthly avg spending.
//  So I also need to calculate monthly avg spending.

//Params: Not case-sensitive.


//why are we only getting 1 page? We need to modify the fetch such that it returns a range.
